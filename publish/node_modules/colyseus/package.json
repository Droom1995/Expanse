{
  "_args": [
    [
      {
        "raw": "colyseus@^0.3.3",
        "scope": null,
        "escapedName": "colyseus",
        "name": "colyseus",
        "rawSpec": "^0.3.3",
        "spec": ">=0.3.3 <0.4.0",
        "type": "range"
      },
      "/home/droom/Projects/WebstormProjects/LD35/server"
    ]
  ],
  "_from": "colyseus@>=0.3.3 <0.4.0",
  "_id": "colyseus@0.3.3",
  "_inCache": true,
  "_location": "/colyseus",
  "_nodeVersion": "5.0.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/colyseus-0.3.3.tgz_1460817381589_0.29534941771999"
  },
  "_npmUser": {
    "name": "endel",
    "email": "endel.dreyer@gmail.com"
  },
  "_npmVersion": "3.3.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "colyseus@^0.3.3",
    "scope": null,
    "escapedName": "colyseus",
    "name": "colyseus",
    "rawSpec": "^0.3.3",
    "spec": ">=0.3.3 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/colyseus/-/colyseus-0.3.3.tgz",
  "_shasum": "9363597409d8c2892b7b0987243e9dc254887e85",
  "_shrinkwrap": null,
  "_spec": "colyseus@^0.3.3",
  "_where": "/home/droom/Projects/WebstormProjects/LD35/server",
  "bugs": {
    "url": "https://github.com/gamestdio/colyseus/issues"
  },
  "dependencies": {
    "fast-json-patch": "github:Starcounter-Jack/JSON-Patch",
    "msgpack-lite": "^0.1.13",
    "shortid": "^2.2.4",
    "ws": "^1.0.1"
  },
  "description": "Minimalist Multiplayer Game Server for Node.js.",
  "devDependencies": {
    "assert": "^1.3.0",
    "benchmark": "^1.0.0",
    "colyseus.js": "^0.1.8",
    "express": "^4.13.3",
    "immutable": "^3.7.6",
    "immutable-diff": "^0.1.1",
    "mocha": "^2.3.4",
    "nodemon": "^1.7.1"
  },
  "directories": {},
  "dist": {
    "shasum": "9363597409d8c2892b7b0987243e9dc254887e85",
    "tarball": "https://registry.npmjs.org/colyseus/-/colyseus-0.3.3.tgz"
  },
  "engines": {
    "node": ">= 4.x"
  },
  "gitHead": "c03864afc4800e6e7bb82b9e1de8751b4194b9eb",
  "homepage": "https://github.com/gamestdio/colyseus#readme",
  "keywords": [
    "multiplayer",
    "game",
    "networking",
    "websockets"
  ],
  "maintainers": [
    {
      "name": "endel",
      "email": "endel.dreyer@gmail.com"
    }
  ],
  "name": "colyseus",
  "optionalDependencies": {},
  "readme": "# ![colyseus](examples/logo.png?raw=true)\n\n[![Join the chat at https://gitter.im/gamestdio/colyseus](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gamestdio/colyseus?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://secure.travis-ci.org/gamestdio/colyseus.png?branch=master)](http://travis-ci.org/gamestdio/colyseus)\n\nMinimalist Multiplayer Game Server for Node.js. [View documentation](http://gamestd.io/colyseus/docs).\n\n**Live demos:**\n\n- [tanx](https://playcanvas.com/project/367035/overview/tanxcolyseus) ([source-code](https://github.com/endel/tanx))\n- [tic-tac-toe](https://tictactoe-colyseus.herokuapp.com) ([source-code](https://github.com/endel/tic-tac-toe))\n- [React Example](https://colyseus-react-example.herokuapp.com) ([source-code](https://github.com/endel/colyseus-react-example))\n\n## Features\n\n- WebSocket-based communication\n- Match-making\n- Binary data transfer (through [msgpack](http://msgpack.org))\n- Delta-encoded state broadcasts (through [fast-json-patch](https://github.com/Starcounter-Jack/JSON-Patch/) - [RFC6902](http://tools.ietf.org/html/rfc6902))\n\nTODO:\n\n- delay/lag compensation\n- \"area of interest\" updates/broadcasts\n\n---\n\n**Match-making diagram:**\n\n![Match-making diagram](http://www.gliffy.com/go/publish/image/10069321/L.png)\n\n**Room state diagram:**\n\n![Room state diagram](http://www.gliffy.com/go/publish/image/10069469/L.png)\n\n## Room API\n\n### Callbacks\n\n- onJoin (client) - *when a client joins the room*\n- onLeave (client) - *when a client leaves the room*\n- onMessage (client, data) - *when a client send a message*\n- dispose () - *cleanup callback, called after there's no more clients on the room*\n\n### Methods\n\n- lock() - *lock the room to new clients*\n- unlock() - *unlock the room to new clients*\n- send(client, data) - *send data to a particular client*\n- broadcast(data) - *send data to all connected clients*\n- sendState(client) - *send current state to a particular client*\n- broadcastState() - *send current state to all clients*\n- broadcastPatch() - *send patched (diff) state to all clients* (called\n  automatically at configurable interval)\n- disconnect() - *disconnect all clients then dispose*\n\n## Production usage\n\nIt's recommended to use a [process manager](https://github.com/Unitech/pm2) to ensure the server will reload in\ncase your application goes down.\n\n```\npm2 start server.js --node-args=\"--harmony\"\n```\n\nRedirect port 80 to target deployment port (e.g. 3000), to avoid running harmful\ncode as sudoer: ([read more](http://stackoverflow.com/a/16573737/892698))\n\n```\nsudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 3000\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/gamestdio/colyseus.git"
  },
  "scripts": {
    "debug": "node-debug --harmony ./examples/server.js",
    "start": "nodemon --harmony ./examples/server.js",
    "test": "mocha --harmony"
  },
  "version": "0.3.3"
}
